import { executablePath } from "puppeteer-core";
import puppeteer from "puppeteer-extra";
import hidden from "puppeteer-extra-plugin-stealth";
import axios from "axios";
import cheerio from "cheerio";
import enquirer from 'enquirer';
import formData from 'form-data';
import fs from "fs";

import { LOGIN_URL } from "../constants/url.js";

const { prompt } = enquirer;

export async function getToken () {
  const response = await axios(LOGIN_URL);
  const $ = await cheerio.load(response.data);
  
  let token = $(`input[name="token"]`).attr("value");
  return token;
}

export async function loginFormSubmit() {
  const response = await axios(LOGIN_URL);
  const $ = await cheerio.load(response.data);
}

export async function login () {
  const input = await prompt([
    {
      type: "input",
      name: "user",
      message: "input username"
    },
    {
      type: "password",
      name: "password",
      message: "input password"
    }
  ]);
  
  const token = await getToken();
  const credentials = {
    ...input,
    token: token,
    connect: true,
    remember: true
  };
  
  const data = new formData(credentials);
  const response = await axios({
    url: LOGIN_URL,
    method: "POST",
    data: data,
    withCredentials: true,
    headers: { 
      "Content-Type": "multipart/form-data"
    },
  });
  
  console.log(response);
  fs.writeFileSync("response.html", response.data);
}


export async function login__ () {
  const input = await prompt([
    {
      type: "input",
      name: "user",
      message: "input username"
    },
    {
      type: "password",
      name: "password",
      message: "input password"
    }
  ]);
  
  const token = await getToken();
  const credentials = {
    ...input,
    token: token,
    connect: true,
    remember: true
  };
  puppeteer.use(hidden());
  const browser = await puppeteer.launch({
    headless: false,
    ignoreHTTPSErrors: true,
    executablePath: "/",
    args: [
      "--no-sandbox",
      "--disable-gpu",
    ]
  });
  const page = await browser.newPage();
  await page.setViewport({width: 1920, height: 1080});
  await page.goto(LOGIN_URL, {
    timeout: 0,
    waitUntil: 'networkidle0',
  });
  
  /* click btn modal trigger */
  await page.click(`a[target="#login_box"]`);
  await page.waitForSelector("#login_box");
  /* fill form login */
  await page.type(`input[name="user"]`, credentials.username);
  await page.type(`input[name="password"]`, credentials.password);
  /* submit */
  await page.type(`button[name="connect"]`);
  
  
  const screenData = await page.screenshot({encoding: 'binary', type: 'jpeg', quality: 100});
  
  if (!!screenData) {
    fs.writeFileSync('./screenshot.jpg', screenData);
  } else {
    throw Error('Unable to take screenshot');
  }
  await page.close();
  await browser.close();
}